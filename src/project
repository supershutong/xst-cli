/**
 * 创建、初始化项目
 * 问询、下载模板、复制，写入模板、git初始化、安装依赖
 */
const inquirer = require('inquirer') // 命令行交互问询
const fse = require('fs-extra') // 文件操作增强库
const download = require('download-git-repo') // 远程文件下载，用于拉取git中的项目模板
const chalk = require('chalk') // 控制台字符样式
const path = require('path')
const memFs = require('mem-fs')
const editor = require('mem-fs-editor') // 模板复制及嵌入模板字符串，依赖于 mem-fs
const ora = require('ora') // 优雅终端spinner等待动画
const { exec } = require('child_process')
const { getDirFileName } = require('./utils')
const {
  INJECT_FILES,
  FRAMEWORKS,
  VUE_TEMPLATE,
  REACT_TEMPLATES,
  REACT_NATIVE_TEMPLATE
} = require('./constants')

function Project(options) {
  this.config = Object.assign(
    { projectName: '', description: '', template: '', author: '' },
    options
  )
  const store = memFs.create()
  this.memFsEditor = editor.create(store)
}

Project.prototype.create = function () {
  this.inquire().then(answer => {
    this.config = Object.assign(this.config, answer) // 构建配置
    // 选择模板
    this.selectTemplate().then(answer2 => {
      this.config = Object.assign(this.config, answer2)
      this.generate() // 生成框架
    })
  })
}

Project.prototype.selectTemplate = function () {
  const prompts = []
  prompts.push({
    name: 'template',
    type: 'list',
    message: 'Please select a template: ',
    choices:
      this.config.framework === 'Vue'
        ? VUE_TEMPLATE
        : this.config.framework === 'React'
        ? REACT_TEMPLATES
        : REACT_NATIVE_TEMPLATE
  })
  return inquirer.prompt(prompts)
}

Project.prototype.inquire = function () {
  const prompts = []
  const { projectName, description, author } = this.config
  if (projectName === '') {
    prompts.push({
      type: 'input',
      name: 'projectName',
      message: 'Please input project name: ',
      validate(input) {
        if (!input) {
          return 'Project name must not null'
        }
        if (fse.existsSync(input)) {
          return `The folder ${input} is exist, please change one`
        }
        return true
      }
    })
  } else if (fse.existsSync(projectName)) {
    prompts.push({
      type: 'input',
      name: 'projectName',
      message: `The folder ${input} is exist, please change one`,
      validate(input) {
        if (!input) {
          return 'Project name must not null'
        }
        if (fse.existsSync(input)) {
          return `The folder ${input} is exist, please change one`
        }
        return true
      }
    })
  }

  if (description === '') {
    prompts.push({
      type: 'input',
      name: 'description',
      message: 'Please input project desc'
    })
  }

  if (author === '') {
    prompts.push({
      type: 'input',
      name: 'author',
      message: 'Please input project author'
    })
  }

  prompts.push({
    name: 'framework',
    type: 'list',
    message: `Please pick a framework`,
    choices: FRAMEWORKS
  })

  return inquirer.prompt(prompts)
}

/**
 * 模板替换
 * @param {string} source 源文件路径
 * @param {string} target 目标文件路径
 * @param {object} data 替换文本字段
 */
Project.prototype.injectTemplate = function (source, target, data) {
  this.memFsEditor.writeJSON(
    target,
    Object.assign({}, this.memFsEditor.readJSON(source), data)
  )
}

/**
 * 下载模板
 */
Project.prototype.generate = function () {
  const { projectName, description, autor, template } = this.config
  const projectPath = path.join(process.cwd(), projectName)
  const downloadPath = path.join(projectPath, '__download__')

  const downloadSpinner = ora('🚀 Download template...')
  downloadSpinner.start()
  // 下载 git repo
  download(template, downloadPath, { clone: true }, err => {
    // node约定：先处理异常
    if (err) {
      downloadSpinner.color = 'red'
      downloadSpinner.fail(err.message)
      downloadSpinner.fail(
        `Please check your network, make sure u can access to template ${template}`
      )
      fse.remove(downloadPath)
      fse.remove(projectPath)
      return
    }

    downloadSpinner.color = 'green'
    downloadSpinner.succeed('🎉 Download Success')

    // 复制文件
    const copyFiles = getDirFileName(downloadPath)
    copyFiles.forEach(file => {
      fse.copySync(path.join(downloadPath, file), path.join(projectPath, file))
      console.log(
        `${chalk.green('✔')}${chalk.grey(`Create: ${projectName}/${file}`)}`
      )
    })

    INJECT_FILES.forEach(file => {
      this.injectTemplate(
        path.join(downloadPath, file),
        path.join(projectName, file),
        {
          name: projectName,
          description,
          author
        }
      )
    })

    this.memFsEditor.commit(() => {
      INJECT_FILES.forEach(file => {
        console.log(`🚚  ${chalk.grey(`Create: ${projectName}/${file}`)}`)
      })
      fse.remove(downloadPath)
      process.chdir(projectPath)

      // git初始化
      const gitInitSpinner = ora(`⚓ git init`)
      gitInitSpinner.start()

      const gitInit = exec('git init')
      gitInit.on('close', code => {
        if (code === 0) {
          gitInitSpinner.color = 'green'
          gitInitSpinner.succeed(gitInit.stdout.read())
        } else {
          gitInitSpinner.color = 'red'
          gitInitSpinner.fail(gitInit.stderr.read())
        }
        console.log() // 控制台打印一行空行

        // 安装依赖
        const installSpinner = ora(
          '>>> Installing dependency. This might take a while...'
        )
        installSpinner.start()
        exec('npm install', (error, stdout, stderr) => {
          if (error) {
            installSpinner.color = 'red'
            installSpinner.fail(
              chalk.red('🔗 Dependency installed, please try again.')
            )
            console.log(error)
          } else {
            installSpinner.color = 'green'
            installSpinner.succeed('🎉 Dependency installed success.')
            console.log(`${stderr}${stdout}`)
            console.log(
              chalk.default(
                `🎉  Successfully created project ${chalk.yellow(projectName)}`
              )
            )
            console.log(
              chalk.default(`👉  Get started with the following commands:`)
            )
            console.log()
            console.log(chalk.cyan(` ${chalk.gray('$')} cd ${projectName}`))
            console.log(chalk.cyan(` ${chalk.gray('$')} npm start`))
          }
        })
      })
    })
  })
}

module.exports = Project
